@page "/Tabel/EditProfil"
@inject NyDatingApp1.Data.datingdatabase Db
@using NyDatingApp1.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>EditProfil</PageTitle>

<h1>EditProfil</h1>

<h4>User</h4>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="User.Id" value="@User.AccountId" />
                <div class="mb-3">
                    <label for="UserName" class="form-label">UserName:</label>
                    <InputText id="UserName" @bind-Value="User.UserName" class="form-control" />
                    <ValidationMessage For="() => User.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="AboutMe" class="form-label">AboutMe:</label>
                    <InputText id="AboutMe" @bind-Value="User.AboutMe" class="form-control" />
                    <ValidationMessage For="() => User.AboutMe" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Height" class="form-label">Height:</label>
                    <InputNumber id="Height" @bind-Value="User.Height" class="form-control" />
                    <ValidationMessage For="() => User.Height" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="BirthDate" class="form-label">BirthDate:</label>
                    <InputDate id="BirthDate" @bind-Value="User.BirthDate" class="form-control" />
                    <ValidationMessage For="() => User.BirthDate" class="text-danger" />
                </div>
                

                

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Tabel">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public Profile? User { get; set; }

    public List<City> cities { get; set; } = new List<City>();

    protected override async Task OnInitializedAsync()
    {
        cities = await Db.Cities.ToListAsync();

        User = await Db.Profiles.FirstOrDefaultAsync(m => m.AccountId == Id);

        if (User == null)
        {
            // Initialize User with default data
            User = new Profile
                {
                    AccountId = 0,
                    UserName = "Default User",
                    AboutMe = "This is a default user profile.",
                    BirthDate = DateTime.Now,
                    Height = 0, // Default height in cm
                    CityId = await CreateNewCityWithDefaultName() // Create new city with default name and get the new CityId
                };
        }
    }

    public async Task<int> CreateNewCityWithDefaultName()
    {
        // Create new city with default name
        var newCity = new City
            {
                CityName = "Default City" // Default city name
                                          // Add other properties if needed
            };

        // Add new city to database
        Db.Cities.Add(newCity);
        await Db.SaveChangesAsync();

        // Return the newly generated CityId
        return newCity.CityId;
    }

    public async Task UpdateUser()
    {
        // Check if the user already exists in the database
        var existingUser = await Db.Profiles.FirstOrDefaultAsync(m => m.AccountId == User.AccountId);

        if (existingUser == null)
        {
            // Check if the account exists
            var accountExists = UserExists(User.AccountId);

            if (!accountExists)
            {
                // Create a new account
                var newAccount = new Account
                    {
                        AccountId = User.AccountId, // Assign the provided AccountId
                                                    // Add other properties if needed
                    };

                Db.Accounts.Add(newAccount);
            }

            // Attach the user as a new entity
            Db.Profiles.Add(User);
        }
        else
        {
            // Update existing user
            Db.Attach(User).State = EntityState.Modified;
        }

        try
        {
            await Db.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User.AccountId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/Tabel");
    }


    bool UserExists(int id)
    {
        return Db.Accounts.Any(e => e.AccountId == id);
    }
}

