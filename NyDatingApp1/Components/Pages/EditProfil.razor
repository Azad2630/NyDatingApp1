@page "/Tabel/EditProfil"
@inject NyDatingApp1.Data.datingdatabase Db
@using NyDatingApp1.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>EditProfil</PageTitle>

<h1>EditProfil</h1>

<h4>User</h4>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="User.Id" value="@User.AccountId" />
                <div class="mb-3">
                    <label for="UserName" class="form-label">UserName:</label>
                    <InputText id="UserName" @bind-Value="User.UserName" class="form-control" />
                    <ValidationMessage For="() => User.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="UserName" class="form-label">UserName:</label>
                    <InputText id="UserName" @bind-Value="User.AboutMe" class="form-control" />
                    <ValidationMessage For="() => User.AboutMe" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Height" class="form-label">Height:</label>
                    <!-- Brug InputNumber for int egenskaber -->
                    <InputNumber id="Height" @bind-Value="User.Height" class="form-control" />
                    <ValidationMessage For="() => User.Height" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="UserName" class="form-label">UserName:</label>
                    <InputDate id="UserName" @bind-Value="User.BirthDate" class="form-control" />
                    <ValidationMessage For="() => User.BirthDate" class="text-danger" />
                </div>
                @* <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="User.LastName" class="form-control" />
                    <ValidationMessage For="() => User.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText type="email" id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="() => User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="login" class="form-label">Login:</label>
                    <InputText id="login" @bind-Value="User.Login" class="form-control" />
                    <ValidationMessage For="() => User.Login" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" />
                    <ValidationMessage For="() => User.Password" class="text-danger" />
                </div>
                
                <div class="mb-3">
                    <label for="createdate" class="form-label">CreateDate:</label>
                    <InputDate id="createdate" @bind-Value="User.CreateDate" class="form-control" />
                    <ValidationMessage For="() => User.CreateDate" class="text-danger" />
                </div> *@

                

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Tabel">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Profile? User { get; set; }


    // public Profile Profile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User ??= await Db.Profiles.FirstOrDefaultAsync(m => m.AccountId == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUser()
    {
        Db.Attach(User!).State = EntityState.Modified;

        // Db.Attach(Profile).State = EntityState.Modified;

        try
        {
            await Db.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.AccountId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/Tabel");
    }

    bool UserExists(int id)
    {
        return Db.Accounts.Any(e => e.AccountId == id);
    }
}

